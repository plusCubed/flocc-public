# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"mutation root"
type mutation_root {
    "delete data from the table: \"rooms\""
    delete_rooms(
        "filter the rows which have to be deleted"
        where: rooms_bool_exp!
    ): rooms_mutation_response
    "delete single row from the table: \"rooms\""
    delete_rooms_by_pk(id: uuid!): rooms
    "delete data from the table: \"users\""
    delete_users(
        "filter the rows which have to be deleted"
        where: users_bool_exp!
    ): users_mutation_response
    "delete single row from the table: \"users\""
    delete_users_by_pk(id: String!): users
    "insert data into the table: \"rooms\""
    insert_rooms(
        "the rows to be inserted"
        objects: [rooms_insert_input!]!,
        "on conflict condition"
        on_conflict: rooms_on_conflict
    ): rooms_mutation_response
    "insert a single row into the table: \"rooms\""
    insert_rooms_one(
        "the row to be inserted"
        object: rooms_insert_input!,
        "on conflict condition"
        on_conflict: rooms_on_conflict
    ): rooms
    "insert data into the table: \"users\""
    insert_users(
        "the rows to be inserted"
        objects: [users_insert_input!]!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users_mutation_response
    "insert a single row into the table: \"users\""
    insert_users_one(
        "the row to be inserted"
        object: users_insert_input!,
        "on conflict condition"
        on_conflict: users_on_conflict
    ): users
    "update data of the table: \"rooms\""
    update_rooms(
        "sets the columns of the filtered rows to the given values"
        _set: rooms_set_input,
        "filter the rows which have to be updated"
        where: rooms_bool_exp!
    ): rooms_mutation_response
    "update single row of the table: \"rooms\""
    update_rooms_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: rooms_set_input,
        pk_columns: rooms_pk_columns_input!
    ): rooms
    "update data of the table: \"users\""
    update_users(
        "increments the numeric columns with given value of the filtered values"
        _inc: users_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        "filter the rows which have to be updated"
        where: users_bool_exp!
    ): users_mutation_response
    "update single row of the table: \"users\""
    update_users_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: users_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: users_set_input,
        pk_columns: users_pk_columns_input!
    ): users
}

type query_root {
    "fetch data from the table: \"rooms\""
    rooms(
        "distinct select on columns"
        distinct_on: [rooms_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [rooms_order_by!],
        "filter the rows returned"
        where: rooms_bool_exp
    ): [rooms!]!
    "fetch aggregated fields from the table: \"rooms\""
    rooms_aggregate(
        "distinct select on columns"
        distinct_on: [rooms_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [rooms_order_by!],
        "filter the rows returned"
        where: rooms_bool_exp
    ): rooms_aggregate!
    "fetch data from the table: \"rooms\" using primary key columns"
    rooms_by_pk(id: uuid!): rooms
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "An aggregate relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: String!): users
}

"columns and relationships of \"rooms\""
type rooms {
    id: uuid!
    locked: Boolean!
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "An aggregate relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
}

"aggregated selection of \"rooms\""
type rooms_aggregate {
    aggregate: rooms_aggregate_fields
    nodes: [rooms!]!
}

"aggregate fields of \"rooms\""
type rooms_aggregate_fields {
    count(columns: [rooms_select_column!], distinct: Boolean): Int!
    max: rooms_max_fields
    min: rooms_min_fields
}

"aggregate max on columns"
type rooms_max_fields {
    id: uuid
}

"aggregate min on columns"
type rooms_min_fields {
    id: uuid
}

"response of any mutation on the table \"rooms\""
type rooms_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [rooms!]!
}

type subscription_root {
    "fetch data from the table: \"rooms\""
    rooms(
        "distinct select on columns"
        distinct_on: [rooms_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [rooms_order_by!],
        "filter the rows returned"
        where: rooms_bool_exp
    ): [rooms!]!
    "fetch aggregated fields from the table: \"rooms\""
    rooms_aggregate(
        "distinct select on columns"
        distinct_on: [rooms_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [rooms_order_by!],
        "filter the rows returned"
        where: rooms_bool_exp
    ): rooms_aggregate!
    "fetch data from the table: \"rooms\" using primary key columns"
    rooms_by_pk(id: uuid!): rooms
    "An array relationship"
    users(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): [users!]!
    "An aggregate relationship"
    users_aggregate(
        "distinct select on columns"
        distinct_on: [users_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [users_order_by!],
        "filter the rows returned"
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(id: String!): users
}

"columns and relationships of \"users\""
type users {
    id: String!
    mute: Boolean!
    name: String!
    "An object relationship"
    room: rooms
    room_id: uuid
    status: Int!
}

"aggregated selection of \"users\""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
    avg: users_avg_fields
    count(columns: [users_select_column!], distinct: Boolean): Int!
    max: users_max_fields
    min: users_min_fields
    stddev: users_stddev_fields
    stddev_pop: users_stddev_pop_fields
    stddev_samp: users_stddev_samp_fields
    sum: users_sum_fields
    var_pop: users_var_pop_fields
    var_samp: users_var_samp_fields
    variance: users_variance_fields
}

"aggregate avg on columns"
type users_avg_fields {
    status: Float
}

"aggregate max on columns"
type users_max_fields {
    id: String
    name: String
    room_id: uuid
    status: Int
}

"aggregate min on columns"
type users_min_fields {
    id: String
    name: String
    room_id: uuid
    status: Int
}

"response of any mutation on the table \"users\""
type users_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [users!]!
}

"aggregate stddev on columns"
type users_stddev_fields {
    status: Float
}

"aggregate stddev_pop on columns"
type users_stddev_pop_fields {
    status: Float
}

"aggregate stddev_samp on columns"
type users_stddev_samp_fields {
    status: Float
}

"aggregate sum on columns"
type users_sum_fields {
    status: Int
}

"aggregate var_pop on columns"
type users_var_pop_fields {
    status: Float
}

"aggregate var_samp on columns"
type users_var_samp_fields {
    status: Float
}

"aggregate variance on columns"
type users_variance_fields {
    status: Float
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"rooms\""
enum rooms_constraint {
    "unique or primary key constraint"
    rooms_pkey
}

"select columns of table \"rooms\""
enum rooms_select_column {
    "column name"
    id
    "column name"
    locked
}

"update columns of table \"rooms\""
enum rooms_update_column {
    "column name"
    id
    "column name"
    locked
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
    "unique or primary key constraint"
    users_pkey
}

"select columns of table \"users\""
enum users_select_column {
    "column name"
    id
    "column name"
    mute
    "column name"
    name
    "column name"
    room_id
    "column name"
    status
}

"update columns of table \"users\""
enum users_update_column {
    "column name"
    id
    "column name"
    mute
    "column name"
    name
    "column name"
    room_id
    "column name"
    status
}

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"rooms\". All fields are combined with a logical 'AND'."
input rooms_bool_exp {
    _and: [rooms_bool_exp!]
    _not: rooms_bool_exp
    _or: [rooms_bool_exp!]
    id: uuid_comparison_exp
    locked: Boolean_comparison_exp
    users: users_bool_exp
}

"input type for inserting data into table \"rooms\""
input rooms_insert_input {
    id: uuid
    locked: Boolean
    users: users_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"rooms\""
input rooms_obj_rel_insert_input {
    data: rooms_insert_input!
    "on conflict condition"
    on_conflict: rooms_on_conflict
}

"on conflict condition type for table \"rooms\""
input rooms_on_conflict {
    constraint: rooms_constraint!
    update_columns: [rooms_update_column!]! = []
    where: rooms_bool_exp
}

"Ordering options when selecting data from \"rooms\"."
input rooms_order_by {
    id: order_by
    locked: order_by
    users_aggregate: users_aggregate_order_by
}

"primary key columns input for table: rooms"
input rooms_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"rooms\""
input rooms_set_input {
    id: uuid
    locked: Boolean
}

"order by aggregate values of table \"users\""
input users_aggregate_order_by {
    avg: users_avg_order_by
    count: order_by
    max: users_max_order_by
    min: users_min_order_by
    stddev: users_stddev_order_by
    stddev_pop: users_stddev_pop_order_by
    stddev_samp: users_stddev_samp_order_by
    sum: users_sum_order_by
    var_pop: users_var_pop_order_by
    var_samp: users_var_samp_order_by
    variance: users_variance_order_by
}

"input type for inserting array relation for remote table \"users\""
input users_arr_rel_insert_input {
    data: [users_insert_input!]!
    "on conflict condition"
    on_conflict: users_on_conflict
}

"order by avg() on columns of table \"users\""
input users_avg_order_by {
    status: order_by
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
    _and: [users_bool_exp!]
    _not: users_bool_exp
    _or: [users_bool_exp!]
    id: String_comparison_exp
    mute: Boolean_comparison_exp
    name: String_comparison_exp
    room: rooms_bool_exp
    room_id: uuid_comparison_exp
    status: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"users\""
input users_inc_input {
    status: Int
}

"input type for inserting data into table \"users\""
input users_insert_input {
    id: String
    mute: Boolean
    name: String
    room: rooms_obj_rel_insert_input
    room_id: uuid
    status: Int
}

"order by max() on columns of table \"users\""
input users_max_order_by {
    id: order_by
    name: order_by
    room_id: order_by
    status: order_by
}

"order by min() on columns of table \"users\""
input users_min_order_by {
    id: order_by
    name: order_by
    room_id: order_by
    status: order_by
}

"on conflict condition type for table \"users\""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]! = []
    where: users_bool_exp
}

"Ordering options when selecting data from \"users\"."
input users_order_by {
    id: order_by
    mute: order_by
    name: order_by
    room: rooms_order_by
    room_id: order_by
    status: order_by
}

"primary key columns input for table: users"
input users_pk_columns_input {
    id: String!
}

"input type for updating data in table \"users\""
input users_set_input {
    id: String
    mute: Boolean
    name: String
    room_id: uuid
    status: Int
}

"order by stddev() on columns of table \"users\""
input users_stddev_order_by {
    status: order_by
}

"order by stddev_pop() on columns of table \"users\""
input users_stddev_pop_order_by {
    status: order_by
}

"order by stddev_samp() on columns of table \"users\""
input users_stddev_samp_order_by {
    status: order_by
}

"order by sum() on columns of table \"users\""
input users_sum_order_by {
    status: order_by
}

"order by var_pop() on columns of table \"users\""
input users_var_pop_order_by {
    status: order_by
}

"order by var_samp() on columns of table \"users\""
input users_var_samp_order_by {
    status: order_by
}

"order by variance() on columns of table \"users\""
input users_variance_order_by {
    status: order_by
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar uuid